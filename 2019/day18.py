import itertools
import time
from collections import defaultdict

import networkx as nx

from utils import get_adjacent

tunnels = '''#################################################################################
#.........#q..#.......................#.#.....................#...#.............#
#.#####.#.###.#.#######.#############.#.#.###################.#.#.#.#######.###.#
#...#...#...#.....#...#g#...........#...#.#...........#.O.#...#.#.#...#...#.#...#
###.#.#####.#######.#.#.#####.###.#.###.#.#####.#####.#.#.#.###.#F###.#.#.#.#T###
#.#.#...#...#.......#...#...#...#.#.#...#.....#...#.#.#.#...#...#...#.#.#...#...#
#.#.###.#.###.###########.#.#####.###.#######.#.#.#.#.#.#####.#####.#.#.#########
#...#...#.....#...........#.....#.#y..#.#.....#.#.#...#.....#...#...#.#.#.......#
#.###.#########.#####.#########.#.#.###.#.#######.#.#######.###.#.###.#.#.#####.#
#...#.......#...#.....#.....#.....#.#...#.#.......#.....#.#...#.#.#.#.#.......#.#
#.#######.#.#.#########.###.#.#####.#.#.#.###.#########.#.#.#.#.#.#.#.#########.#
#.#.....#.#.#.#...#.......#.#.#.#...#.#.#...#.#...#...#...#.#.#.#.#...#.#.......#
###.###.###.#.#.#.#.#######.#.#.#.#####.###.#.#.#.###.###.#.#.#.#.###.#.#.#####E#
#...#.......#...#...#...#...#...#.#.....#.#...#.#.......#.#.#.#.#...#...#...#...#
#.#################.###.#.#######.#.#.###.#####.#########.#.###.###.#.#####.#.###
#.......#.....#...#...#.#.......#.#.#...#.................#.#...#.#.#.#.....#...#
#.#####.#.###.#.#.###.#.#######.#.#####.#.#########.#######.#.###.#.#.#.#######.#
#e#...#.#.#.#.#.#.#...........#.........#.#.......#.....#...#.#...#.#.#.#.C.#...#
#.#.###.#.#.#.#.#.#######.#############.#.#.#####.#######.#.#.#.#.#.#.#.#.#.#.###
#.#.#...#...#...#...#.....#...#...#.....#.#...#.#.....#...#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#####.#######.#######.#.#.#.#######.###.#.#####.#.#####.#.#.#.###.#.###.#.#
#...#.#...#.#.....#...#...#.#...#.......#.#...#...#...#.....#.#.#.#.....#.....#.#
###.#.#.#.#.#####.#####.#.#.###########.#.#.###.#.#.###.###.###.#.#######.#####.#
#...#...#.#.........#...#...#...#.......#.#.#...#.#.#.#...#.....#...#...#...#...#
#.#######.#########.###.#######.#.#########.#.###.#.#.#.#####.###.#.#.#.###.#.#.#
#.#.#.....#.......#.#...#.......#.#.#...#...#...#...#...#...#.#...#.#.#...#.#.#.#
#.#.#.#####.#####.#.#.###.#######.#.#.#.#.#####.#####.###.#.###.###.#.#####.###Z#
#...#.........#...#...#.#.........#..k#.#.#.....#.......#.#...#...#...#.....#...#
###############.#.#####.#.#########.###.#.#.#############.###.###.#####.#####.#.#
#...N...#...#...#.#...#...#.#...#...#...#.#.............#.#.......#...#.#....b#.#
#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#.#############.#.#########.#.#.###.###.#
#.#.......#.#...#.....#.#...#.#...#...#.#.#...#.......#.#...#.....#.#.#.....#...#
#.#########.###.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.###.#.#.#######.###
#.#...V.#.#.H.#.#.......#.#.#.....#...#.#...#.#...#.........#...#...#.......#...#
#.#.###.#.###.#.#.#######.#####.#####.###.###.#.#.###.#####.###.#########.#####.#
#.....#.#...#.#.#.#.......#.....#...#...#.#...#.#...#.#...#.#...#.......#.....#.#
#.#####.#.###.#.#.#######.#.#####.#.###.###.#.#.###.###.#.###.###.#####.###.#.#.#
#.#.#...#..a....#...#...#...#.....#...#.#...#.#...#.....#.....#.#.....#..h..#.#.#
#.#.#.#############.#.#.#####.#######.#.#.#######.#############.#####.#########A#
#...#.................#.......#.............................X.......#...........#
#######################################.@.#######################################
#.D.....#.....#.......#.....#.........................#.....#.......#.#...#...#.#
#.###.#.#.#.#.#.#####.#.###.#.#.#######.#.###########.#.#.#.#.#####.#.#I#.#.#.#.#
#i#...#.#.#.#...#.....#.#...#.#x......#.#.#.......#...#.#.#...#.......#.#...#.#.#
###.###.###.#.#####.###.#.###.#######.#.#.###.###.#.#.#.#.#####.#######.#####.#.#
#...#.......#.#...#.#...#...#.#.#.....#.#.....#.#.#.#.#.#v....#.#...#...#d..#...#
#.#######.#####.#.#.#.#####.#.#.#.#####.#######.#.#.###.#####.#.#.###.###.#####.#
#.#.....#.#....u#.#.#...#...#...#.#.#...#.#...#...#.#...#.....#.#.#...#.........#
#.#.###.#.#.#####.#.###.#.#####.#.#.#.###.#.#.#.###.#.###.#####.#.#.###.#########
#.S.#.#.#.#.....#.#...#.#...#...#.#.#.#.#...#.....#.#...#...#.....#...#...#..s..#
#.###.#.#.#.#####.#.###.###.#.###.#.#.#.#.#########.#.#####.#########.###.#####.#
#.#...#.#.#.#.....#.#...#...#.#.#.#.#...#.....#...#...#...#n..#.P...#.#.#.......#
#.#.#.#.###.#.#####.#.###.###.#.#.#.###.#######.#.#####.#.###.#.###.#.#.#######.#
#...#.#.....#.....#.#.#...#.....#.#...#.#...#...#.....#.#...#.#.#.#...#.......#.#
#####.###########.#.#.###.#######.#.###.#.#.#.#######.#.###.#.#.#.#########.#.#U#
#.....#.......#...#.#...#.#.......#.....#.#...#.....#...#.....#.#...........#.#.#
#.#########.#.#.###.###.#.#.#######.#####.#####.#.###.#####.###.#.#######.#####.#
#.#.......#.#.#.#..w#...#...#...#...#.K.#...#.#.#.....#...#.#...#.#.#...#.#.....#
#.#.#####.#.#.#.###.#.#######.###.###.#.#.#.#.#.#######.#.###.###.#.#.#.#.#.#####
#...#..p....#.#...#.#...#...#...#.....#.#.#.#.#...#.....#...#...#.#...#...#.....#
#.###########.###.#.###.#.#.#R#.#######.#.#.#.###.#.#######.###.#.###.#########.#
#.#.......#.....#.#.#...#.#.#.#.......#.#.#.#.....#.#.#.....#.#.#...#.#.......#.#
#.#.#####.#######.#.#####M###.#.#####.#.#.#.###.###.#.#.#####.#W#.#.###.#.###.#.#
#.#.#.#.........#.#.#...#...#.#...#..m#.#.#...#.#...#.#.#...#j..#.#.#...#.#...#.#
#.#.#.#.#######.#.#.#.#.###.#.###.#####.#.###.###.###.#.#.#.#######.#.###.#.###.#
#.#.#.....#...#...#...#...#...#...#.....#.#.#.....#...#...#.........#.#...#.Q.#.#
#.#.#####.#.#.###########.#.###.#.#.#####.#.#######.#.#####.###.#####.#.#.#####.#
#.#.....#.#.#.........#...#.#...#.#.#...#...#.......#.#.#...#.#.#.G...#.#.#...#.#
#######.###.#########.#J#####L###.#.#.#.###.###.#.###.#.#.###.#.#.#####.###.#.#.#
#.....#.......#...#...#.#...#.#...#...#.#.#...#.#.#.....#.#...#.#.#...#.....#.Y.#
#B###.#######.###.#.###.#.#.#.#########.#.###.#.#.#######.#.###.#.#.#############
#.#...#...#...#...#...#l..#...#.....#...#.#...#.#.......#.#.....#.#.........#...#
#.###.#.#.#.###.#####.#######.#.###.#.###.#.###.#######.#.#####.#.#.###.###.#.###
#...#...#.#.....#...#...#...#.#.#.#...#.#.#.#...#.......#.....#.#.#...#.#...#f..#
#.#.#####.#.#####.#.###.#.#.#.#.#.#####.#.#.#####.#####.#####.###.#####.#.#####.#
#.#.....#.#.#.....#.#...#r#...#.....#...#.#.....#.#...#.#...#..o#.#.....#.#.....#
#.#####.#.###.#####.#.#.###########.#.#.#.#####.#.#.###.###.###.#.#.#####.#.#.#.#
#...#.#.#.....#z..#...#.#.....#.....#.#.#c....#.#.#...#.....#...#...#....t#.#.#.#
###.#.#.#######.#.#######.###.#.#######.#.#.###.#.#.#.#####.#.#######.#######.#.#
#.....#.........#...........#...........#.#.......#.#.......#.................#.#
#################################################################################'''

testunnel = '''########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################'''


def reduce_graph(g, letters_pos):
    combinations = list(itertools.combinations(letters_pos, 2))
    letter_graph = nx.Graph()
    path_dict = defaultdict(list)
    for u, v in combinations:
        path = nx.shortest_path(g, u, v)
        path_dict[frozenset(sorted((u, v)))] = [p for p in path if type(p) != complex]
        letter_graph.add_edge(u, v, weight=len(path) - 1)
    return letter_graph, path_dict


def get_graph(points):
    g = nx.Graph()
    for p in points:
        adj = get_adjacent(p)
        for q in adj & points:
            g.add_edge(p, q)
    return g


def get_points(tunnel_array):
    poi = {}
    points = set()
    for i, x in enumerate(tunnel_array):
        for j, y in enumerate(x):
            c = complex(j, -i)
            if y == '#':
                continue
            points.add(c)
            if y != '.':
                poi[y] = c

    return points, poi


def get_paths(g, keys, poi, ):
    paths = {}
    combinations = list(itertools.combinations(keys | {'@'}, 2))
    for s, t in combinations:
        source = poi[s]
        target = poi[t]
        p = nx.shortest_path(g, source, target)
        paths[(source, target)] = p
        paths[(target, source)] = p
    return paths


def get_key_graph(paths, doors_pos, poi_inv):
    g = nx.Graph()
    for pair, path in paths.items():
        path_doors_pos = doors_pos & set(path)
        path_doors =set(poi_inv[pd] for pd in path_doors_pos)
        g.add_edge(pair[0],pair[1], weight = len(path)-1, doors = path_doors)

    return g




def run1():
    string = testunnel
    # string = string.split('\n')
    tunnel_array = [list(s) for s in string.split('\n')]

    points, poi = get_points(tunnel_array)
    keys = set(k for k in poi.keys() if k.lower() == k and k != '@')
    poi_inv = {v:k for k,v in poi.items()}
    doors = set(k for k in poi.keys() if k.upper() ==k and k !='@')
    doors_pos = set(poi[d] for d in doors)

    graph = get_graph(points)
    paths = get_paths(graph, keys, poi, )

    key_graph = get_key_graph(paths, doors_pos, poi_inv)
    node = poi['@']
    unlocked_doors = set()
    # while True:
    #     adj_nodes = key_graph[node]
    #     for new_node, attrs in adj_nodes.items():
    #         if



def run2():
    pass


if __name__ == "__main__":
    start_time = time.time()
    f = run1()
    g = run2()
    print(f"Part 1:", f)
    print(f"Part2:", g)
    print(time.time() - start_time)
